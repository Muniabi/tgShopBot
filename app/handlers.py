## handlers.py

from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
import app.keyboards as kb

from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)

router = Router()

cart_items = []

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
products = [
    {"name": "AMD Ryzen 5600", "price": "10.000‚ÇΩ", "description": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä 6 —è–¥–µ—Ä, 12 –ø–æ—Ç–æ–∫–æ–≤."},
    {"name": "Intel Core i5-10300H", "price": "15.000‚ÇΩ", "description": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä 4 —è–¥—Ä–∞, 8 –ø–æ—Ç–æ–∫–æ–≤."},
    {"name": "NVIDIA GeForce RTX 3060", "price": "40.000‚ÇΩ", "description": "–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ —Å 12 –ì–ë GDDR6 –ø–∞–º—è—Ç–∏."},
    {"name": "Corsair RM850", "price": "8.000‚ÇΩ", "description": "–ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 850 –í—Ç, 80 Plus Gold."},
    {"name": "ASUS PRIME Z490-F", "price": "20.000‚ÇΩ", "description": "–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞ Z490."},
    {"name": "Kingston A2000", "price": "5.000‚ÇΩ", "description": "SSD –Ω–∞ 1 –¢–ë, M.2."},
    {"name": "Cooler Master MasterWatt 650", "price": "10.000‚ÇΩ", "description": "–ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 650 –í—Ç, 80 Plus Gold."},
    {"name": "AMD Ryzen 5700", "price": "12.000‚ÇΩ", "description": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä 8 —è–¥–µ—Ä, 16 –ø–æ—Ç–æ–∫–æ–≤."},
    {"name": "Intel Core i7-10700H", "price": "25.000‚ÇΩ", "description": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä 8 —è–¥–µ—Ä, 16 –ø–æ—Ç–æ–∫–æ–≤."},
    {"name": "NVIDIA GeForce RTX 3070", "price": "50.000‚ÇΩ", "description": "–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ —Å 16 –ì–ë GDDR6 –ø–∞–º—è—Ç–∏."},
    {"name": "Corsair RM650", "price": "6.000‚ÇΩ", "description": "–ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 650 –í—Ç, 80 Plus Gold."},
    {"name": "ASUS PRIME Z590-A", "price": "25.000‚ÇΩ", "description": "–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞ Z590."},
    {"name": "Samsung 970 EVO Plus", "price": "8.000‚ÇΩ", "description": "SSD –Ω–∞ 1 –¢–ë, PCIe 3.0."},
    {"name": "Cooler Master MasterWatt 750", "price": "12.000‚ÇΩ", "description": "–ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 750 –í—Ç, 80 Plus Gold."},
    {"name": "AMD Ryzen 5800", "price": "15.000‚ÇΩ", "description": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä 8 —è–¥–µ—Ä, 16 –ø–æ—Ç–æ–∫–æ–≤."},
    {"name": "Intel Core i9-10800H", "price": "35.000‚ÇΩ", "description": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä 8 —è–¥–µ—Ä, 16 –ø–æ—Ç–æ–∫–æ–≤."},
    {"name": "NVIDIA GeForce RTX 3080", "price": "60.000‚ÇΩ", "description": "–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ —Å 20 –ì–ë GDDR6X –ø–∞–º—è—Ç–∏."},
    {"name": "Corsair RM750", "price": "7.000‚ÇΩ", "description": "–ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 750 –í—Ç, 80 Plus Gold."},
    {"name": "ASUS PRIME Z590-E", "price": "30.000‚ÇΩ", "description": "–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞ Z590."},
    {"name": "Samsung 980 PRO", "price": "10.000‚ÇΩ", "description": "SSD –Ω–∞ 1 –¢–ë, PCIe 4.0."},
    {"name": "Cooler Master MasterWatt 850", "price": "15.000‚ÇΩ", "description": "–ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ 850 –í—Ç, 80 Plus Gold."}
]



@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:", reply_markup=kb.main_menu)

@router.message(F.text == "üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤")
async def search_from_menu(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:")

@router.message(F.text)
async def search_products(message: Message):
    query = message.text.lower()
    matching_products = [
        product for product in products if query in product["name"].lower()
    ]

    if matching_products:
        response = "–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n"
        for product in matching_products:
            response += f"\nüîπ {product['name']} - {product['price']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {product['description']}\n"
    else:
        response = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    await message.answer(response)

@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏")


@router.message(F.text == "–ö–∞—Ç–∞–ª–æ–≥")
async def catalog(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞", reply_markup=kb.catalog)


@router.callback_query(F.data == "cpu")
async def cpu(callback: CallbackQuery):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", show_alert=True)
    await callback.message.edit_text(
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã", reply_markup=kb.cpu
    )


@router.callback_query(F.data == "gpu")
async def gpu(callback: CallbackQuery):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", show_alert=True)
    await callback.message.edit_text(
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: –í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã", reply_markup=kb.gpu
    )


@router.callback_query(F.data == "ram")
async def ram(callback: CallbackQuery):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", show_alert=True)
    await callback.message.edit_text(
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å", reply_markup=kb.ram
    )


@router.callback_query(F.data == "ssd")
async def ssd(callback: CallbackQuery):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", show_alert=True)
    await callback.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: SSD", reply_markup=kb.ssd)


@router.callback_query(F.data == "motherboard")
async def motherboard(callback: CallbackQuery):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", show_alert=True)
    await callback.message.edit_text(
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: –ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ –ø–ª–∞—Ç—ã", reply_markup=kb.motherboard
    )


@router.callback_query(F.data == "ryzen")
async def ryzen(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã RYZEN –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.ryzen
    )


@router.callback_query(F.data == "intel")
async def intel(callback: CallbackQuery):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ Intel")
    await callback.message.edit_text(
        "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã Intel –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.intel
    )


@router.callback_query(F.data == "nvidia")
async def nvidia(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã Nvidia –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.nvidia
    )


@router.callback_query(F.data == "asus")
async def asus(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ –ø–ª–∞—Ç—ã ASUS –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.asus
    )


@router.callback_query(F.data == "amd")
async def amd(callback: CallbackQuery):
    await callback.message.edit_text("–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã AMD –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.amd)


@router.callback_query(F.data == "msi")
async def msi(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ –ø–ª–∞—Ç—ã MSI –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.msi
    )


@router.callback_query(F.data == "gigabyte")
async def gigabyte(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ –ø–ª–∞—Ç—ã Gigabyte –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.gigabyte
    )


@router.callback_query(F.data == "kingston")
async def kingston(callback: CallbackQuery):
    await callback.message.edit_text(
        "–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å Kingston –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.kingston
    )


@router.callback_query(F.data == "samsung")
async def samsung(callback: CallbackQuery):
    await callback.message.edit_text(
        "–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å Samsung –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.samsung
    )


@router.callback_query(F.data == "corsair")
async def samsung(callback: CallbackQuery):
    await callback.message.edit_text(
        "–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å Corsair –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.corsair
    )


@router.callback_query(F.data == "western")
async def western(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ñ–µ—Å—Ç–∫–∏–µ –¥–∏—Å–∫–∏ Western Digital –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.western
    )


@router.callback_query(F.data == "seagate")
async def seagate(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ñ–µ—Å—Ç–∫–∏–µ –¥–∏—Å–∫–∏ Seagate –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.seagate
    )


@router.callback_query(F.data == "samsung_ssd")
async def samsung(callback: CallbackQuery):
    await callback.message.edit_text(
        "SSD –¥–∏—Å–∫–∏ Samsung –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.samsung_ssd
    )


@router.callback_query(F.data == "cooler")
async def samsung(callback: CallbackQuery):
    await callback.message.edit_text(
        "–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ Cooler Master –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.cooler
    )


@router.callback_query(F.data == "noctua")
async def noctua(callback: CallbackQuery):
    await callback.message.edit_text(
        "–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ Noctua –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.noctua
    )


@router.callback_query(F.data == "back")
async def back(callback: CallbackQuery):
    await callback.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await callback.message.edit_text(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.catalog
    )


@router.callback_query(F.data == "checkout")
async def checkout(callback: CallbackQuery):
    await callback.message.answer("–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?")
    await callback.message.edit_reply_markup(
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–î–∞", callback_data="confirm_checkout")],
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_checkout")],
            ]
        )
    )


@router.callback_query(F.data == "confirm_checkout")
async def confirm_checkout(callback: CallbackQuery):
    await callback.message.answer("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω")


@router.callback_query(F.data == "cancel_checkout")
async def cancel_checkout(callback: CallbackQuery):
    await callback.message.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")
    await callback.message.edit_reply_markup(reply_markup=kb.catalog)
