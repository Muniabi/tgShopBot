## handlers.py

from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
import app.keyboards as kb
import asyncio

from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)

router = Router()

cart_items = []

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
products = [{"name": "AMD Ryzen 5600", "price": "10.000‚ÇΩ", "description": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä 6 —è–¥–µ—Ä, 12 –ø–æ—Ç–æ–∫–æ–≤."},
    {"name": "AMD Ryzen 7700", "price": "18.000‚ÇΩ", "description": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä 8 —è–¥–µ—Ä, 16 –ø–æ—Ç–æ–∫–æ–≤."},
    {"name": "AMD Ryzen 7700X", "price": "19.600‚ÇΩ", "description": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä 8 —è–¥–µ—Ä, 16 –ø–æ—Ç–æ–∫–æ–≤, –≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–π."},
    {"name": "AMD Ryzen 8700", "price": "22.400‚ÇΩ", "description": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä 8 —è–¥–µ—Ä, 16 –ø–æ—Ç–æ–∫–æ–≤, –≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–π."},
    {"name": "AMD Ryzen 8700X", "price": "23.900‚ÇΩ", "description": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä 8 —è–¥–µ—Ä, 16 –ø–æ—Ç–æ–∫–æ–≤, –≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–π."},
    {"name": "AMD Ryzen 9700X", "price": "28.560‚ÇΩ", "description": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä 8 —è–¥–µ—Ä, 16 –ø–æ—Ç–æ–∫–æ–≤, –≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–π."},
    {"name": "AMD Ryzen 9700", "price": "28.560‚ÇΩ", "description": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä 8 —è–¥–µ—Ä, 16 –ø–æ—Ç–æ–∫–æ–≤."},
    {"name": "AMD Ryzen 9800X", "price": "28.560‚ÇΩ", "description": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä 8 —è–¥–µ—Ä, 16 –ø–æ—Ç–æ–∫–æ–≤, –≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–π."},
    {"name": "AMD Ryzen 9800", "price": "28.560‚ÇΩ", "description": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä 8 —è–¥–µ—Ä, 16 –ø–æ—Ç–æ–∫–æ–≤."},
    {"name": "Intel Core i5-10300H", "price": "11.000‚ÇΩ", "description": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä 4 —è–¥—Ä–∞, 8 –ø–æ—Ç–æ–∫–æ–≤, –¥–ª—è –Ω–æ—É—Ç–±—É–∫–æ–≤."},
    {"name": "Intel Core i5-10300", "price": "12.000‚ÇΩ", "description": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä 6 —è–¥–µ—Ä, 12 –ø–æ—Ç–æ–∫–æ–≤, –¥–ª—è –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤."},
    {"name": "Intel Core i5-10300T", "price": "13.000‚ÇΩ", "description": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä 6 —è–¥–µ—Ä, 12 –ø–æ—Ç–æ–∫–æ–≤, –¥–ª—è –Ω–æ—É—Ç–±—É–∫–æ–≤."},
    {"name": "Intel Core i5-10300U", "price": "14.000‚ÇΩ", "description": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä 6 —è–¥–µ—Ä, 12 –ø–æ—Ç–æ–∫–æ–≤, –¥–ª—è –Ω–æ—É—Ç–±—É–∫–æ–≤."},
    {"name": "Intel Core i5-10300F", "price": "15.000‚ÇΩ", "description": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä 6 —è–¥–µ—Ä, 12 –ø–æ—Ç–æ–∫–æ–≤, –¥–ª—è –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤, –±–µ–∑ –≤–∏–¥–µ–æ—è–¥—Ä–∞."},
    {"name": "Intel Core i7-14900KF", "price": "25.000‚ÇΩ", "description": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä 8 —è–¥–µ—Ä, 16 –ø–æ—Ç–æ–∫–æ–≤, –≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–π, –¥–ª—è –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤."},
    {"name": "NVIDIA GeForce RTX 2070", "price": "50.000‚ÇΩ", "description": "–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞, 8 –≥–± –ø–∞–º—è—Ç–∏, 2560 —è–¥–µ—Ä, 14 –ì–ì—Ü."},
    {"name": "NVIDIA GeForce RTX 2060", "price": "30.000‚ÇΩ", "description": "–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞, 6 –≥–± –ø–∞–º—è—Ç–∏, 2176 —è–¥–µ—Ä, 14.5 –ì–ì—Ü."},
    {"name": "NVIDIA GeForce RTX 3060", "price": "25.000‚ÇΩ", "description": "–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞, 12 –≥–± –ø–∞–º—è—Ç–∏, 3840 —è–¥–µ—Ä, 15.5 –ì–ì—Ü."},
    {"name": "NVIDIA GeForce RTX 3070", "price": "30.000‚ÇΩ", "description": "–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞, 8 –≥–± –ø–∞–º—è—Ç–∏, 2560 —è–¥–µ—Ä, 14.5 –ì–ì—Ü."},
    {"name": "NVIDIA GeForce RTX 3090", "price": "70.000‚ÇΩ", "description": "–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞, 24 –≥–± –ø–∞–º—è—Ç–∏, 5888 —è–¥–µ—Ä, 14.5 –ì–ì—Ü."},
    {"name": "NVIDIA GeForce RTX 3090 Ti", "price": "100.000‚ÇΩ", "description": "–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞, 24 –≥–± –ø–∞–º—è—Ç–∏, 5888 —è–¥–µ—Ä, 14.5 –ì–ì—Ü, –≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω–∞—è."},
    {"name": "ASUS ROG STRIX Z490-F", "price": "15.000‚ÇΩ", "description": "–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞, —Ñ–æ—Ä–º-—Ñ–∞–∫—Ç–æ—Ä ATX, Intel Z490, 4 —Å–ª–æ—Ç–∞ –ø–∞–º—è—Ç–∏, 6 SATA, 2 M.2, 1 U.2, 1 HDMI, 1 DisplayPort, 1 USB 3.2 Gen 2, 1 USB 3.2 Gen 1, 1 LAN, 1 Wi-Fi, 1 Bluetooth."},
    {"name": "ASUS ROG STRIX Z490", "price": "25.000‚ÇΩ", "description": "–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞, —Ñ–æ—Ä–º-—Ñ–∞–∫—Ç–æ—Ä ATX, Intel Z490, 4 —Å–ª–æ—Ç–∞ –ø–∞–º—è—Ç–∏, 6 SATA, 2 M.2, 1 U.2, 1 HDMI, 1 DisplayPort, 1 USB 3.2 Gen 2, 1 USB 3.2 Gen 1, 1 LAN, 1 Wi-Fi, 1 Bluetooth."},
    {"name": "ASUS ROG STRIX Z590", "price": "30.000‚ÇΩ", "description": "–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞, —Ñ–æ—Ä–º-—Ñ–∞–∫—Ç–æ—Ä ATX, Intel Z590, 4 —Å–ª–æ—Ç–∞ –ø–∞–º—è—Ç–∏, 6 SATA, 2 M.2, 1 U.2, 1 HDMI, 1 DisplayPort, 1 USB 3.2 Gen 2, 1 USB 3.2 Gen 1, 1 LAN, 1 Wi-Fi, 1 Bluetooth."},
]



@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:", reply_markup=kb.main_menu)

@router.message(F.text == "üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤") 
async def search_from_menu(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=kb.search)
    @router.message(F.text)
    async def search_products(message: Message):
        query = message.text.lower()
        matching_products = [
            product for product in products if query in product["name"].lower()
        ]

        if matching_products:
            response = "–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n"
            for product in matching_products:
                response += f"\nüîπ {product['name']} - {product['price']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {product['description']}\n"
        else:
            response = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

        await message.answer(response)

@router.message(F.text == "‚ùå –ù–∞–∑–∞–¥")
async def catalog(message: Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.main_menu)

@router.message(F.text == "‚ÑπÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def cmd_help(message: Message):
    await message.answer("ü§ñ –í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏.\nüí¨ –°–≤–æ–±–æ–¥–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞–ø–∏—à–µ—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ...", reply_markup=kb.main_menu)
    
    # –ó–∞–¥–µ—Ä–∂–∫–∞ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
    await asyncio.sleep(5)

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
    await message.answer("üí¨ –ü—Ä–∏–≤–µ—Ç! –Ø —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å? üòä")
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–æ—Ç–º–µ–Ω–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ"
    cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", callback_data="cancel_support_request")]
    ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer("–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=cancel_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–æ—Ç–º–µ–Ω–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ"
@router.callback_query(F.data == "cancel_support_request")
async def cancel_support_request(callback: CallbackQuery):
    await callback.answer("‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.message.edit_reply_markup()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É


@router.message(F.text == "üìö –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤")
async def catalog(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞", reply_markup=kb.catalog)


@router.callback_query(F.data == "cpu")
async def cpu(callback: CallbackQuery):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
    await callback.message.edit_text(
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã", reply_markup=kb.cpu
    )


@router.callback_query(F.data == "gpu")
async def gpu(callback: CallbackQuery):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
    await callback.message.edit_text(
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: –í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã", reply_markup=kb.gpu
    )


@router.callback_query(F.data == "ram")
async def ram(callback: CallbackQuery):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
    await callback.message.edit_text(
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å", reply_markup=kb.ram
    )


@router.callback_query(F.data == "ssd")
async def ssd(callback: CallbackQuery):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
    await callback.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: SSD", reply_markup=kb.ssd)


@router.callback_query(F.data == "motherboard")
async def motherboard(callback: CallbackQuery):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
    await callback.message.edit_text(
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: –ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ –ø–ª–∞—Ç—ã", reply_markup=kb.motherboard
    )


@router.callback_query(F.data == "ryzen")
async def ryzen(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã RYZEN –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.ryzen
    )


@router.callback_query(F.data == "intel")
async def intel(callback: CallbackQuery):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ Intel")
    await callback.message.edit_text(
        "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã Intel –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.intel
    )


@router.callback_query(F.data == "nvidia")
async def nvidia(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã Nvidia –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.nvidia
    )


@router.callback_query(F.data == "asus")
async def asus(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ –ø–ª–∞—Ç—ã ASUS –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.asus
    )


@router.callback_query(F.data == "amd")
async def amd(callback: CallbackQuery):
    await callback.message.edit_text("–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã AMD –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.amd)


@router.callback_query(F.data == "msi")
async def msi(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ –ø–ª–∞—Ç—ã MSI –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.msi
    )


@router.callback_query(F.data == "gigabyte")
async def gigabyte(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ –ø–ª–∞—Ç—ã Gigabyte –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.gigabyte
    )


@router.callback_query(F.data == "kingston")
async def kingston(callback: CallbackQuery):
    await callback.message.edit_text(
        "–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å Kingston –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.kingston
    )


@router.callback_query(F.data == "samsung")
async def samsung(callback: CallbackQuery):
    await callback.message.edit_text(
        "–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å Samsung –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.samsung
    )


@router.callback_query(F.data == "corsair")
async def samsung(callback: CallbackQuery):
    await callback.message.edit_text(
        "–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å Corsair –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.corsair
    )


@router.callback_query(F.data == "western")
async def western(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ñ–µ—Å—Ç–∫–∏–µ –¥–∏—Å–∫–∏ Western Digital –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.western
    )


@router.callback_query(F.data == "seagate")
async def seagate(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ñ–µ—Å—Ç–∫–∏–µ –¥–∏—Å–∫–∏ Seagate –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.seagate
    )


@router.callback_query(F.data == "samsung_ssd")
async def samsung(callback: CallbackQuery):
    await callback.message.edit_text(
        "SSD –¥–∏—Å–∫–∏ Samsung –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.samsung_ssd
    )


@router.callback_query(F.data == "cooler")
async def samsung(callback: CallbackQuery):
    await callback.message.edit_text(
        "–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ Cooler Master –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.cooler
    )


@router.callback_query(F.data == "noctua")
async def noctua(callback: CallbackQuery):
    await callback.message.edit_text(
        "–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ Noctua –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.noctua
    )


@router.callback_query(F.data == "back")
async def back(callback: CallbackQuery):
    await callback.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await callback.message.edit_text(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.catalog
    )


@router.callback_query(F.data == "checkout")
async def checkout(callback: CallbackQuery):
    await callback.message.answer("–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?")
    await callback.message.edit_reply_markup(
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–î–∞", callback_data="confirm_checkout")],
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_checkout")],
            ]
        )
    )


@router.callback_query(F.data == "confirm_checkout")
async def confirm_checkout(callback: CallbackQuery):
    await callback.message.answer("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω")


@router.callback_query(F.data == "cancel_checkout")
async def cancel_checkout(callback: CallbackQuery):
    await callback.message.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")
    await callback.message.edit_reply_markup(reply_markup=kb.catalog)
