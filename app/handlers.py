## handlers.py

from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
import app.keyboards as kb
import asyncio
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

import aiohttp

router = Router()

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
products = [
    {"id": 1, "name": "AMD Ryzen 5600", "price": "10.000", "description": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä 6 —è–¥–µ—Ä, 12 –ø–æ—Ç–æ–∫–æ–≤."},
    {"id": 2, "name": "AMD Ryzen 7700", "price": "18.000", "description": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä 8 —è–¥–µ—Ä, 16 –ø–æ—Ç–æ–∫–æ–≤."},
    {"id": 3, "name": "AMD Ryzen 7700X", "price": "19.600", "description": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä 8 —è–¥–µ—Ä, 16 –ø–æ—Ç–æ–∫–æ–≤, –≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–π."},
    {"id": 4, "name": "AMD Ryzen 8700", "price": "22.400", "description": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä 8 —è–¥–µ—Ä, 16 –ø–æ—Ç–æ–∫–æ–≤, –≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–π."},
    {"id": 5, "name": "AMD Ryzen 8700X", "price": "23.900", "description": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä 8 —è–¥–µ—Ä, 16 –ø–æ—Ç–æ–∫–æ–≤, –≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–π."},
    {"id": 6, "name": "AMD Ryzen 9700X", "price": "28.560", "description": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä 8 —è–¥–µ—Ä, 16 –ø–æ—Ç–æ–∫–æ–≤, –≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–π."},
    {"id": 7, "name": "AMD Ryzen 9700", "price": "28.560", "description": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä 8 —è–¥–µ—Ä, 16 –ø–æ—Ç–æ–∫–æ–≤."},
    {"id": 8, "name": "AMD Ryzen 9800X", "price": "28.560", "description": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä 8 —è–¥–µ—Ä, 16 –ø–æ—Ç–æ–∫–æ–≤, –≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–π."},
    {"id": 9, "name": "AMD Ryzen 9800", "price": "28.560", "description": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä 8 —è–¥–µ—Ä, 16 –ø–æ—Ç–æ–∫–æ–≤."},
    {"id": 10, "name": "Intel Core i5-10300H", "price": "11.000", "description": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä 4 —è–¥—Ä–∞, 8 –ø–æ—Ç–æ–∫–æ–≤, –¥–ª—è –Ω–æ—É—Ç–±—É–∫–æ–≤."},
    {"id": 11, "name": "Intel Core i5-10300", "price": "12.000", "description": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä 6 —è–¥–µ—Ä, 12 –ø–æ—Ç–æ–∫–æ–≤, –¥–ª—è –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤."},
    {"id": 12, "name": "Intel Core i5-10300T", "price": "13.000", "description": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä 6 —è–¥–µ—Ä, 12 –ø–æ—Ç–æ–∫–æ–≤, –¥–ª—è –Ω–æ—É—Ç–±—É–∫–æ–≤."},
    {"id": 13, "name": "Intel Core i5-10300U", "price": "14.000", "description": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä 6 —è–¥–µ—Ä, 12 –ø–æ—Ç–æ–∫–æ–≤, –¥–ª—è –Ω–æ—É—Ç–±—É–∫–æ–≤."},
    {"id": 14, "name": "Intel Core i5-10300F", "price": "15.000", "description": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä 6 —è–¥–µ—Ä, 12 –ø–æ—Ç–æ–∫–æ–≤, –¥–ª—è –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤, –±–µ–∑ –≤–∏–¥–µ–æ—è–¥—Ä–∞."},
    {"id": 15, "name": "Intel Core i7-14900KF", "price": "25.000", "description": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä 8 —è–¥–µ—Ä, 16 –ø–æ—Ç–æ–∫–æ–≤, –≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–π, –¥–ª—è –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤."},
    {"id": 16, "name": "NVIDIA GeForce RTX 2070", "price": "50.000", "description": "–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞, 8 –≥–± –ø–∞–º—è—Ç–∏, 2560 —è–¥–µ—Ä, 14 –ì–ì—Ü."},
    {"id": 17, "name": "NVIDIA GeForce RTX 2060", "price": "30.000", "description": "–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞, 6 –≥–± –ø–∞–º—è—Ç–∏, 2176 —è–¥–µ—Ä, 14.5 –ì–ì—Ü."},
    {"id": 18, "name": "NVIDIA GeForce RTX 3060", "price": "25.000", "description": "–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞, 12 –≥–± –ø–∞–º—è—Ç–∏, 3840 —è–¥–µ—Ä, 15.5 –ì–ì—Ü."},
    {"id": 19, "name": "NVIDIA GeForce RTX 3070", "price": "30.000", "description": "–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞, 8 –≥–± –ø–∞–º—è—Ç–∏, 2560 —è–¥–µ—Ä, 14.5 –ì–ì—Ü."},
    {"id": 20, "name": "NVIDIA GeForce RTX 3090", "price": "70.000", "description": "–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞, 24 –≥–± –ø–∞–º—è—Ç–∏, 5888 —è–¥–µ—Ä, 14.5 –ì–ì—Ü."},
    {"id": 21, "name": "NVIDIA GeForce RTX 3090 Ti", "price": "100.000", "description": "–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞, 24 –≥–± –ø–∞–º—è—Ç–∏, 5888 —è–¥–µ—Ä, 14.5 –ì–ì—Ü, –≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω–∞—è."},
    {"id": 22, "name": "ASUS ROG STRIX Z490-F", "price": "15.000", "description": "–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞, —Ñ–æ—Ä–º-—Ñ–∞–∫—Ç–æ—Ä ATX, Intel Z490, 4 —Å–ª–æ—Ç–∞ –ø–∞–º—è—Ç–∏, 6 SATA, 2 M.2, 1 U.2, 1 HDMI, 1 DisplayPort, 1 USB 3.2 Gen 2, 1 USB 3.2 Gen 1, 1 LAN, 1 Wi-Fi, 1 Bluetooth."},
    {"id": 23, "name": "ASUS ROG STRIX Z490", "price": "25.000", "description": "–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞, —Ñ–æ—Ä–º-—Ñ–∞–∫—Ç–æ—Ä ATX, Intel Z490, 4 —Å–ª–æ—Ç–∞ –ø–∞–º—è—Ç–∏, 6 SATA, 2 M.2, 1 U.2, 1 HDMI, 1 DisplayPort, 1 USB 3.2 Gen 2, 1 USB 3.2 Gen 1, 1 LAN, 1 Wi-Fi, 1 Bluetooth."},
    {"id": 24, "name": "ASUS ROG STRIX Z590", "price": "30.000", "description": "–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞, —Ñ–æ—Ä–º-—Ñ–∞–∫—Ç–æ—Ä ATX, Intel Z590, 4 —Å–ª–æ—Ç–∞ –ø–∞–º—è—Ç–∏, 6 SATA, 2 M.2, 1 U.2, 1 HDMI, 1 DisplayPort, 1 USB 3.2 Gen 2, 1 USB 3.2 Gen 1, 1 LAN, 1 Wi-Fi, 1 Bluetooth."},
    {"id": 25, "name": "Cooler Master MasterWatt 600", "price": "4.500", "description": "–ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è, 600W, –Ω–∞–¥–µ–∂–Ω—ã–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π."},
    {"id": 26, "name": "Cooler Master MasterWatt 800", "price": "5.500", "description": "–ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è, 800W, –Ω–∞–¥–µ–∂–Ω—ã–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π."},
    {"id": 27, "name": "Cooler Master MasterWatt 1000", "price": "6.500", "description": "–ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è, 1000W, –Ω–∞–¥–µ–∂–Ω—ã–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π."},
    {"id": 28, "name": "Noctua NF-A12", "price": "2.000", "description": "–í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä, 120–º–º, –≤—ã—Å–æ–∫–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π."},
    {"id": 29, "name": "Noctua NF-A14", "price": "2.500", "description": "–í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä, 140–º–º, –≤—ã—Å–æ–∫–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π."},
    {"id": 30, "name": "Noctua NF-A16", "price": "3.000", "description": "–í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä, 160–º–º, –≤—ã—Å–æ–∫–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π."},
    {"id": 31, "name": "Samsung 970 EVO Plus", "price": "6.000", "description": "SSD, 1TB, NVMe, –≤—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å."},
    {"id": 32, "name": "Samsung 980 Pro", "price": "7.000", "description": "SSD, 1TB, NVMe, –≤—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å."},
    {"id": 33, "name": "Samsung 980 Evo Plus", "price": "6.500", "description": "SSD, 1TB, NVMe, –≤—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å."},
    {"id": 34, "name": "Western Digital WD2003FZEX", "price": "4.000", "description": "HDD, 2TB, 7200 –æ–±/–º–∏–Ω."},
    {"id": 35, "name": "Seagate ST1000DM006", "price": "3.500", "description": "HDD, 1TB, 7200 –æ–±/–º–∏–Ω."}
]

cart_items = []




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
def generate_product_buttons(products):
    buttons = [
        [InlineKeyboardButton(text=p['name'], callback_data=f"product_{p['id']}")]
        for p in products
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async def handle_category(callback: CallbackQuery, category_name: str, products_list: list):
    await callback.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category_name}")
    await callback.message.edit_text(
        f"{category_name} –≤ –Ω–∞–ª–∏—á–∏–∏:",
        reply_markup=generate_product_buttons(products_list)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data.startswith("product_"))
async def show_product_details(callback: CallbackQuery):
    product_id = int(callback.data.split("_")[1])
    product = next((p for p in products if p["id"] == product_id), None)
    
    if product:
        product_info = f"üì¶ {product['name']}\n–¶–µ–Ω–∞: {product['price']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {product['description']}"
        await callback.message.edit_text(
            product_info,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_to_cart_{product_id}")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_list")]
                ]
            )
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
@router.callback_query(F.data.startswith("add_to_cart_"))
async def add_to_cart(callback: CallbackQuery):
    # print(f"Callback data: {callback.data}")  # –õ–æ–≥–∏—Ä—É–µ–º callback.data
    try:
        product_id = int(callback.data.split("_")[-1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º product_id
        product = next((p for p in products if p["id"] == product_id), None)
        
        if product:
            cart_items.append(product)  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
            await callback.answer(f"–¢–æ–≤–∞—Ä {product['name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.")
            await callback.message.edit_reply_markup()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        else:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except (IndexError, ValueError) as e:
        print(f"–û—à–∏–±–∫–∞: {str(e)}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
@router.callback_query(F.data == "back_to_list")
async def back_to_list(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=generate_product_buttons(products)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:", reply_markup=kb.main_menu)

@router.message(F.text == "üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤") 
async def search_from_menu(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=kb.search)

    @router.message(F.text)
    async def search_products(message: Message):
        query = message.text.lower()
        matching_products = [
            product for product in products if query in product["name"].lower()
        ]

        if matching_products:
            response = "–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n"
            for product in matching_products:
                response += f"\nüîπ {product['name']} - {product['price']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {product['description']}\n"
        else:
            response = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

        await message.answer(response)

@router.message(F.text == "‚ùå –ù–∞–∑–∞–¥")
async def catalog(message: Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb.main_menu)

@router.message(F.text == "‚ÑπÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def cmd_help(message: Message):
    await message.answer("ü§ñ –í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏.\nüí¨ –°–≤–æ–±–æ–¥–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞–ø–∏—à–µ—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ...", reply_markup=kb.main_menu)

    await asyncio.sleep(5)
    await message.answer("üí¨ –ü—Ä–∏–≤–µ—Ç! –Ø —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å? üòä")

    cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", callback_data="cancel_support_request")]
    ])

    await message.answer("–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=cancel_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–æ—Ç–º–µ–Ω–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ"
@router.callback_query(F.data == "cancel_support_request")
async def cancel_support_request(callback: CallbackQuery):
    await callback.answer("‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.message.edit_reply_markup()

@router.message(F.text == "üìö –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤")
async def catalog(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞", reply_markup=kb.catalog)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ—Ä–∑–∏–Ω—ã
@router.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def view_cart(message: Message):
    if not cart_items:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
    else:
        cart_content = "–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ:\n"
        for item in cart_items:
            cart_content += f"üîπ {item['name']} - {item['price']}\n"
        cart_content += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        await message.answer(cart_content, reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")],
                [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", callback_data="checkout")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_list")]
            ]
        ))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
@router.callback_query(F.data == "clear_cart")
async def clear_cart(callback: CallbackQuery):
    cart_items.clear()  # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")
    await callback.message.edit_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=None)


@router.callback_query(F.data == "back_to_list")
async def back_to_list(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã Intel –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.intel
    )


@router.callback_query(F.data == "cpu")
async def cpu(callback: CallbackQuery):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã")
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="AMD", callback_data="cpu_amd")],
                [InlineKeyboardButton(text="Intel", callback_data="cpu_intel")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_category")]
            ]
        )
    )

@router.callback_query(F.data == "cpu_amd")
async def cpu_amd(callback: CallbackQuery):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ AMD")
    await callback.message.edit_text(
        "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã AMD –≤ –Ω–∞–ª–∏—á–∏–∏:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                *[
                    [InlineKeyboardButton(text=p['name'], callback_data=f"product_{p['id']}")]
                    for p in products if "Ryzen" in p["name"]
                ],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_cpu")]  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ back_to_cpu
            ]
        )
    )

@router.callback_query(F.data == "cpu_intel")
async def cpu_intel(callback: CallbackQuery):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ Intel")
    await callback.message.edit_text(
        "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã Intel –≤ –Ω–∞–ª–∏—á–∏–∏:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                *[
                    [InlineKeyboardButton(text=p['name'], callback_data=f"product_{p['id']}")]
                    for p in products if "Intel" in p["name"]
                ],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_cpu")]  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ back_to_cpu
            ]
        )
    )

@router.callback_query(F.data == "back_to_category")
async def back_to_category(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=kb.catalog
    )

@router.callback_query(F.data == "back_to_cpu")
async def back_to_cpu(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="AMD", callback_data="cpu_amd")],
                [InlineKeyboardButton(text="Intel", callback_data="cpu_intel")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_category")]
            ]
        )
    )

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏
@router.callback_query(F.data == "gpu")
async def gpu(callback: CallbackQuery):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="Nvidia", callback_data="gpu_nvidia")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_category")]
            ]
        )
    )

@router.callback_query(F.data.startswith("gpu_"))
async def show_gpu_products(callback: CallbackQuery):
    manufacturer = "NVIDIA" if callback.data == "gpu_nvidia" else "AMD"
    products_list = [p for p in products if manufacturer in p["name"]]

    await callback.message.edit_text(
        f"–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã {manufacturer} –≤ –Ω–∞–ª–∏—á–∏–∏:",
        reply_markup=generate_product_buttons(products_list)
    )




@router.callback_query(F.data == "gpu")
async def gpu(callback: CallbackQuery):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
    await callback.message.edit_text(
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: –í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã", reply_markup=kb.gpu
    )


@router.callback_query(F.data == "ram")
async def ram(callback: CallbackQuery):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
    await callback.message.edit_text(
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å", reply_markup=kb.ram
    )


@router.callback_query(F.data == "ssd")
async def ssd(callback: CallbackQuery):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
    await callback.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: SSD", reply_markup=kb.ssd)


@router.callback_query(F.data == "motherboard")
async def motherboard(callback: CallbackQuery):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
    await callback.message.edit_text(
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: –ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ –ø–ª–∞—Ç—ã", reply_markup=kb.motherboard
    )


@router.callback_query(F.data == "nvidia")
async def nvidia(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã Nvidia –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.nvidia
    )


@router.callback_query(F.data == "asus")
async def asus(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ –ø–ª–∞—Ç—ã ASUS –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.asus
    )


@router.callback_query(F.data == "amd")
async def amd(callback: CallbackQuery):
    await callback.message.edit_text("–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã AMD –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.amd)


@router.callback_query(F.data == "msi")
async def msi(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ –ø–ª–∞—Ç—ã MSI –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.msi
    )


@router.callback_query(F.data == "gigabyte")
async def gigabyte(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ –ø–ª–∞—Ç—ã Gigabyte –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.gigabyte
    )


@router.callback_query(F.data == "kingston")
async def kingston(callback: CallbackQuery):
    await callback.message.edit_text(
        "–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å Kingston –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.kingston
    )


@router.callback_query(F.data == "samsung")
async def samsung(callback: CallbackQuery):
    await callback.message.edit_text(
        "–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å Samsung –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.samsung
    )


@router.callback_query(F.data == "corsair")
async def samsung(callback: CallbackQuery):
    await callback.message.edit_text(
        "–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å Corsair –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.corsair
    )


@router.callback_query(F.data == "western")
async def western(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ñ–µ—Å—Ç–∫–∏–µ –¥–∏—Å–∫–∏ Western Digital –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.western
    )


@router.callback_query(F.data == "seagate")
async def seagate(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ñ–µ—Å—Ç–∫–∏–µ –¥–∏—Å–∫–∏ Seagate –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.seagate
    )


@router.callback_query(F.data == "samsung_ssd")
async def samsung(callback: CallbackQuery):
    await callback.message.edit_text(
        "SSD –¥–∏—Å–∫–∏ Samsung –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.samsung_ssd
    )


@router.callback_query(F.data == "cooler")
async def samsung(callback: CallbackQuery):
    await callback.message.edit_text(
        "–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ Cooler Master –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.cooler
    )


@router.callback_query(F.data == "noctua")
async def noctua(callback: CallbackQuery):
    await callback.message.edit_text(
        "–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ Noctua –í –Ω–∞–ª–∏—á–∏–∏:", reply_markup=kb.noctua
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@router.callback_query(F.data == "checkout")
async def checkout(callback: CallbackQuery):
    if not cart_items:
        await callback.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.")
        return
    await callback.message.answer("–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?")
    await callback.message.edit_reply_markup(
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–î–∞", callback_data="confirm_checkout")],
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_checkout")],
            ]
        )
    )

@router.callback_query(F.data == "cancel_checkout")
async def cancel_checkout(callback: CallbackQuery):
    await callback.message.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.")
    await callback.message.edit_reply_markup(reply_markup=kb.catalog)



#  –ö–∞—Å—Å–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞

import aiohttp

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±—â–µ–π —Å—É–º–º—ã
def calculate_total(cart_items):
    return sum(float(item['price'].replace('.', '').replace(',', '.')) for item in cart_items)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
# async def create_payment(amount, description):
#     url = 'https://yoomoney.ru/api/quickpay/confirmation'
#     headers = {
#         'Authorization': f'Bearer {"97D24FDB207174DDF3D9651C4CFCEEAD89AADD5FE9077843741FA813C32D81CA"}',  # –í–∞—à API-–∫–ª—é—á –æ—Ç YooMoney
#     }
#     data = {
#         'amount': amount,
#         'currency': 'RUB',
#         'confirmation': {
#             'type': 'redirect',
#             'return_url': 'https://t.me/RaymanShopBot',  # URL, –∫—É–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è
#         },
#         'description': description,
#         'capture': True,
#     }
    
#     async with aiohttp.ClientSession() as session:
#         async with session.post(url, json=data, headers=headers) as response:
#             return await response.json()

import asyncio

@router.callback_query(F.data == "confirm_checkout")
async def confirm_checkout(callback: CallbackQuery):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = await callback.message.answer("üí≥ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    await asyncio.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞
    await message.edit_text("üïí –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...")

    await asyncio.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞
    await message.edit_text("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")

    await asyncio.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞
    await message.edit_text("‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.")
    cart_items.clear()

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –æ–ø–ª–∞—Ç—ã
    await callback.message.answer("üéâ –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! ‚úÖ")




